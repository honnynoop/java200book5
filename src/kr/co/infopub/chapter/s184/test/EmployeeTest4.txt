01: package kr.co.infopub.chapter.s184.test;
02: 
03: import java.sql.SQLException;
04: import java.util.List;
05: import kr.co.infopub.chapter.s184.dto.EmployeeDto;
06: import kr.co.infopub.chapter.s184.model.EmployeeDAO;
07: // findEmployeesByManagerId 바로 아래의 부하직원
08: public class EmployeeTest4 {
09: 	public static void main(String[] args) {
10: 		EmployeeDAO ddao=new EmployeeDAO();
11: 		try {
12: 			List<EmployeeDto> lists=ddao.findEmployeesByManagerId(100+"");
13: 			for (EmployeeDto dd: lists) {
14: 				System.out.println(dd.getEmployeeId()+"  "+dd.getFirstName()+"  "+dd.getLastName());
15: 			}
16: 		} catch (SQLException e) {
17: 			System.out.println( e);
18: 		}
19: 	}
20: }
21: /*
22: CRUD-------------------------------class sample.model.EmployeeDAO.findEmployeesByManagerId()
23: SELECT  E.EMPLOYEE_ID EMPLOYEE_ID, D.EMPLOYEE_ID MANAGER_ID, 
24:   E.FIRST_NAME , 
25:   E.LAST_NAME, E.EMAIL, E.PHONE_NUMBER,E.HIRE_DATE 
26:   FROM EMPLOYEES E, EMPLOYEES D 
27:   WHERE D.EMPLOYEE_ID=E.MANAGER_ID AND E.MANAGER_ID=?
28: Data : 100
29: CRUD--------------------------------------2017-05-13 20:22
30: 101  Neena  Kochhar
31: 102  Lex  De Haan
32: 114  Den  Raphaely
33: 120  Matthew  Weiss
34: 121  Adam  Fripp
35: 122  Payam  Kaufling
36: 123  Shanta  Vollman
37: 124  Kevin  Mourgos
38: 145  John  Russell
39: 146  Karen  Partners
40: 147  Alberto  Errazuriz
41: 148  Gerald  Cambrault
42: 149  Eleni  Zlotkey
43: 201  Michael  Hartstein
44: */
